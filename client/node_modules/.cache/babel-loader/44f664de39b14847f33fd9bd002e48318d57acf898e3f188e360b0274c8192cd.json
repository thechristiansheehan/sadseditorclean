{"ast":null,"code":"import express from \"express\";\nimport multer from \"multer\";\nimport cors from \"cors\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nconst app = express();\napp.use(cors());\napp.use(express.json());\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst uploadDir = path.join(__dirname, \"uploads\");\nif (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);\n\n// Multer: store files temporarily with original name\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, uploadDir),\n  filename: (req, file, cb) => cb(null, file.originalname) // will rename manually later\n});\nconst upload = multer({\n  storage\n}).any();\n\n// Helper: find next sequential number for extension\nconst getNextNumber = ext => {\n  const files = fs.readdirSync(uploadDir);\n  let max = 0;\n  for (const f of files) {\n    if (f.endsWith(ext)) {\n      const num = parseInt(f.split(\".\")[0], 10);\n      if (!isNaN(num) && num > max) max = num;\n    }\n  }\n  return max + 1;\n};\n\n// Upload endpoint\napp.post(\"/upload\", upload, (req, res) => {\n  try {\n    const textFile = req.files.find(f => f.fieldname === \"textfile\");\n    const imageFile = req.files.find(f => f.fieldname === \"file\");\n    if (!textFile || !imageFile) {\n      return res.status(400).json({\n        message: \"Both text file and image file are required.\"\n      });\n    }\n\n    // Determine next sequential number\n    const nextNumber = getNextNumber(\".txt\"); // same number for text + image\n    const textFilename = `${nextNumber}.txt`;\n    const imageFilename = `${nextNumber}.jpg`;\n\n    // Move uploaded files to sequential names\n    fs.renameSync(textFile.path, path.join(uploadDir, textFilename));\n    fs.renameSync(imageFile.path, path.join(uploadDir, imageFilename));\n    console.log(\"Uploaded:\", textFilename, imageFilename);\n    res.json({\n      message: \"Upload successful\",\n      textfile: textFilename,\n      image: imageFilename\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      message: \"Server error during upload.\"\n    });\n  }\n});\n\n// Serve uploads\napp.use(\"/uploads\", express.static(uploadDir));\n\n// Delete endpoint\napp.delete(\"/delete/:filename\", (req, res) => {\n  const filePath = path.join(uploadDir, req.params.filename);\n  if (!fs.existsSync(filePath)) return res.status(404).json({\n    message: \"File not found.\"\n  });\n  fs.unlink(filePath, err => {\n    if (err) return res.status(500).json({\n      message: \"Error deleting file.\"\n    });\n    res.json({\n      message: \"File deleted successfully.\"\n    });\n  });\n});\nconst PORT = 5000;\napp.listen(PORT, () => console.log(`✅ Server running at http://localhost:${PORT}`));","map":{"version":3,"names":["express","multer","cors","fs","path","fileURLToPath","app","use","json","__filename","import","meta","url","__dirname","dirname","uploadDir","join","existsSync","mkdirSync","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","any","getNextNumber","ext","files","readdirSync","max","f","endsWith","num","parseInt","split","isNaN","post","res","textFile","find","fieldname","imageFile","status","message","nextNumber","textFilename","imageFilename","renameSync","console","log","textfile","image","err","error","static","delete","filePath","params","unlink","PORT","listen"],"sources":["C:/Users/Flame/sadseditor/sadseditor/client/src/Resources.jsx"],"sourcesContent":["import express from \"express\";\r\nimport multer from \"multer\";\r\nimport cors from \"cors\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst uploadDir = path.join(__dirname, \"uploads\");\r\nif (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);\r\n\r\n// Multer: store files temporarily with original name\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => cb(null, uploadDir),\r\n  filename: (req, file, cb) => cb(null, file.originalname), // will rename manually later\r\n});\r\nconst upload = multer({ storage }).any();\r\n\r\n// Helper: find next sequential number for extension\r\nconst getNextNumber = (ext) => {\r\n  const files = fs.readdirSync(uploadDir);\r\n  let max = 0;\r\n  for (const f of files) {\r\n    if (f.endsWith(ext)) {\r\n      const num = parseInt(f.split(\".\")[0], 10);\r\n      if (!isNaN(num) && num > max) max = num;\r\n    }\r\n  }\r\n  return max + 1;\r\n};\r\n\r\n// Upload endpoint\r\napp.post(\"/upload\", upload, (req, res) => {\r\n  try {\r\n    const textFile = req.files.find(f => f.fieldname === \"textfile\");\r\n    const imageFile = req.files.find(f => f.fieldname === \"file\");\r\n\r\n    if (!textFile || !imageFile) {\r\n      return res.status(400).json({ message: \"Both text file and image file are required.\" });\r\n    }\r\n\r\n    // Determine next sequential number\r\n    const nextNumber = getNextNumber(\".txt\"); // same number for text + image\r\n    const textFilename = `${nextNumber}.txt`;\r\n    const imageFilename = `${nextNumber}.jpg`;\r\n\r\n    // Move uploaded files to sequential names\r\n    fs.renameSync(textFile.path, path.join(uploadDir, textFilename));\r\n    fs.renameSync(imageFile.path, path.join(uploadDir, imageFilename));\r\n\r\n    console.log(\"Uploaded:\", textFilename, imageFilename);\r\n\r\n    res.json({\r\n      message: \"Upload successful\",\r\n      textfile: textFilename,\r\n      image: imageFilename,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"Server error during upload.\" });\r\n  }\r\n});\r\n\r\n// Serve uploads\r\napp.use(\"/uploads\", express.static(uploadDir));\r\n\r\n// Delete endpoint\r\napp.delete(\"/delete/:filename\", (req, res) => {\r\n  const filePath = path.join(uploadDir, req.params.filename);\r\n  if (!fs.existsSync(filePath)) return res.status(404).json({ message: \"File not found.\" });\r\n\r\n  fs.unlink(filePath, (err) => {\r\n    if (err) return res.status(500).json({ message: \"Error deleting file.\" });\r\n    res.json({ message: \"File deleted successfully.\" });\r\n  });\r\n});\r\n\r\nconst PORT = 5000;\r\napp.listen(PORT, () => console.log(`✅ Server running at http://localhost:${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}