{"ast":null,"code":"\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {}\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {}\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, \"ucs2\");\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i];\n    buf[i] = buf[i + 1];\n    buf[i + 1] = tmp;\n  }\n  return buf;\n};\nUtf16BEEncoder.prototype.end = function () {};\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n  this.overflowByte = -1;\n}\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) {\n    return \"\";\n  }\n  var buf2 = Buffer.alloc(buf.length + 1);\n  var i = 0;\n  var j = 0;\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0];\n    buf2[1] = this.overflowByte;\n    i = 1;\n    j = 2;\n  }\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1];\n    buf2[j + 1] = buf[i];\n  }\n  this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;\n  return buf2.slice(0, j).toString(\"ucs2\");\n};\nUtf16BEDecoder.prototype.end = function () {\n  this.overflowByte = -1;\n};\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n  this.iconv = iconv;\n}\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n  options = options || {};\n  if (options.addBOM === undefined) {\n    options.addBOM = true;\n  }\n  this.encoder = codec.iconv.getEncoder(\"utf-16le\", options);\n}\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str);\n};\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n  this.decoder = null;\n  this.initialBufs = [];\n  this.initialBufsLen = 0;\n  this.options = options || {};\n  this.iconv = codec.iconv;\n}\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBufs.push(buf);\n    this.initialBufsLen += buf.length;\n    if (this.initialBufsLen < 16)\n      // We need more bytes to use space heuristic (see below)\n      {\n        return \"\";\n      }\n\n    // We have enough bytes -> detect endianness.\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = \"\";\n    for (var i = 0; i < this.initialBufs.length; i++) {\n      resStr += this.decoder.write(this.initialBufs[i]);\n    }\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n  return this.decoder.write(buf);\n};\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n    this.decoder = this.iconv.getDecoder(encoding, this.options);\n    var resStr = \"\";\n    for (var i = 0; i < this.initialBufs.length; i++) {\n      resStr += this.decoder.write(this.initialBufs[i]);\n    }\n    var trail = this.decoder.end();\n    if (trail) {\n      resStr += trail;\n    }\n    this.initialBufs.length = this.initialBufsLen = 0;\n    return resStr;\n  }\n  return this.decoder.end();\n};\nfunction detectEncoding(bufs, defaultEncoding) {\n  var b = [];\n  var charsProcessed = 0;\n  // Number of ASCII chars when decoded as LE or BE.\n  var asciiCharsLE = 0;\n  var asciiCharsBE = 0;\n  outerLoop: for (var i = 0; i < bufs.length; i++) {\n    var buf = bufs[i];\n    for (var j = 0; j < buf.length; j++) {\n      b.push(buf[j]);\n      if (b.length === 2) {\n        if (charsProcessed === 0) {\n          // Check BOM first.\n          if (b[0] === 0xFF && b[1] === 0xFE) return \"utf-16le\";\n          if (b[0] === 0xFE && b[1] === 0xFF) return \"utf-16be\";\n        }\n        if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;\n        if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;\n        b.length = 0;\n        charsProcessed++;\n        if (charsProcessed >= 100) {\n          break outerLoop;\n        }\n      }\n    }\n  }\n\n  // Make decisions.\n  // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n  // So, we count ASCII as if it was LE or BE, and decide from that.\n  if (asciiCharsBE > asciiCharsLE) return \"utf-16be\";\n  if (asciiCharsBE < asciiCharsLE) return \"utf-16le\";\n\n  // Couldn't decide (likely all zeros or not enough data).\n  return defaultEncoding || \"utf-16le\";\n}","map":{"version":3,"names":["Buffer","require","exports","utf16be","Utf16BECodec","prototype","encoder","Utf16BEEncoder","decoder","Utf16BEDecoder","bomAware","write","str","buf","from","i","length","tmp","end","overflowByte","buf2","alloc","j","slice","toString","utf16","Utf16Codec","codecOptions","iconv","Utf16Encoder","Utf16Decoder","options","codec","addBOM","undefined","getEncoder","initialBufs","initialBufsLen","push","encoding","detectEncoding","defaultEncoding","getDecoder","resStr","trail","bufs","b","charsProcessed","asciiCharsLE","asciiCharsBE","outerLoop"],"sources":["C:/Users/Flame/sadseditor/sadseditor/client/node_modules/raw-body/node_modules/iconv-lite/encodings/utf16.js"],"sourcesContent":["\"use strict\"\nvar Buffer = require(\"safer-buffer\").Buffer\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec\nfunction Utf16BECodec () {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder\nUtf16BECodec.prototype.decoder = Utf16BEDecoder\nUtf16BECodec.prototype.bomAware = true\n\n// -- Encoding\n\nfunction Utf16BEEncoder () {\n}\n\nUtf16BEEncoder.prototype.write = function (str) {\n  var buf = Buffer.from(str, \"ucs2\")\n  for (var i = 0; i < buf.length; i += 2) {\n    var tmp = buf[i]; buf[i] = buf[i + 1]; buf[i + 1] = tmp\n  }\n  return buf\n}\n\nUtf16BEEncoder.prototype.end = function () {\n}\n\n// -- Decoding\n\nfunction Utf16BEDecoder () {\n  this.overflowByte = -1\n}\n\nUtf16BEDecoder.prototype.write = function (buf) {\n  if (buf.length == 0) { return \"\" }\n\n  var buf2 = Buffer.alloc(buf.length + 1)\n  var i = 0; var j = 0\n\n  if (this.overflowByte !== -1) {\n    buf2[0] = buf[0]\n    buf2[1] = this.overflowByte\n    i = 1; j = 2\n  }\n\n  for (; i < buf.length - 1; i += 2, j += 2) {\n    buf2[j] = buf[i + 1]\n    buf2[j + 1] = buf[i]\n  }\n\n  this.overflowByte = (i == buf.length - 1) ? buf[buf.length - 1] : -1\n\n  return buf2.slice(0, j).toString(\"ucs2\")\n}\n\nUtf16BEDecoder.prototype.end = function () {\n  this.overflowByte = -1\n}\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec\nfunction Utf16Codec (codecOptions, iconv) {\n  this.iconv = iconv\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder\nUtf16Codec.prototype.decoder = Utf16Decoder\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder (options, codec) {\n  options = options || {}\n  if (options.addBOM === undefined) { options.addBOM = true }\n  this.encoder = codec.iconv.getEncoder(\"utf-16le\", options)\n}\n\nUtf16Encoder.prototype.write = function (str) {\n  return this.encoder.write(str)\n}\n\nUtf16Encoder.prototype.end = function () {\n  return this.encoder.end()\n}\n\n// -- Decoding\n\nfunction Utf16Decoder (options, codec) {\n  this.decoder = null\n  this.initialBufs = []\n  this.initialBufsLen = 0\n\n  this.options = options || {}\n  this.iconv = codec.iconv\n}\n\nUtf16Decoder.prototype.write = function (buf) {\n  if (!this.decoder) {\n    // Codec is not chosen yet. Accumulate initial bytes.\n    this.initialBufs.push(buf)\n    this.initialBufsLen += buf.length\n\n    if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)\n    { return \"\" }\n\n    // We have enough bytes -> detect endianness.\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding)\n    this.decoder = this.iconv.getDecoder(encoding, this.options)\n\n    var resStr = \"\"\n    for (var i = 0; i < this.initialBufs.length; i++) { resStr += this.decoder.write(this.initialBufs[i]) }\n\n    this.initialBufs.length = this.initialBufsLen = 0\n    return resStr\n  }\n\n  return this.decoder.write(buf)\n}\n\nUtf16Decoder.prototype.end = function () {\n  if (!this.decoder) {\n    var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding)\n    this.decoder = this.iconv.getDecoder(encoding, this.options)\n\n    var resStr = \"\"\n    for (var i = 0; i < this.initialBufs.length; i++) { resStr += this.decoder.write(this.initialBufs[i]) }\n\n    var trail = this.decoder.end()\n    if (trail) { resStr += trail }\n\n    this.initialBufs.length = this.initialBufsLen = 0\n    return resStr\n  }\n  return this.decoder.end()\n}\n\nfunction detectEncoding (bufs, defaultEncoding) {\n  var b = []\n  var charsProcessed = 0\n  // Number of ASCII chars when decoded as LE or BE.\n  var asciiCharsLE = 0\n  var asciiCharsBE = 0\n\n  outerLoop:\n  for (var i = 0; i < bufs.length; i++) {\n    var buf = bufs[i]\n    for (var j = 0; j < buf.length; j++) {\n      b.push(buf[j])\n      if (b.length === 2) {\n        if (charsProcessed === 0) {\n          // Check BOM first.\n          if (b[0] === 0xFF && b[1] === 0xFE) return \"utf-16le\"\n          if (b[0] === 0xFE && b[1] === 0xFF) return \"utf-16be\"\n        }\n\n        if (b[0] === 0 && b[1] !== 0) asciiCharsBE++\n        if (b[0] !== 0 && b[1] === 0) asciiCharsLE++\n\n        b.length = 0\n        charsProcessed++\n\n        if (charsProcessed >= 100) {\n          break outerLoop\n        }\n      }\n    }\n  }\n\n  // Make decisions.\n  // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n  // So, we count ASCII as if it was LE or BE, and decide from that.\n  if (asciiCharsBE > asciiCharsLE) return \"utf-16be\"\n  if (asciiCharsBE < asciiCharsLE) return \"utf-16le\"\n\n  // Couldn't decide (likely all zeros or not enough data).\n  return defaultEncoding || \"utf-16le\"\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}