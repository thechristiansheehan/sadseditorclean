{"ast":null,"code":"import express from \"express\";\nimport multer from \"multer\";\nimport cors from \"cors\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// Fix __dirname for ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Create uploads folder if missing\nconst uploadDir = path.join(__dirname, \"uploads\");\nif (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);\n\n// Multer: accept any files (prevents UnexpectedField)\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, uploadDir),\n  filename: (req, file, cb) => cb(null, file.originalname)\n});\nconst upload = multer({\n  storage\n}).any(); // <-- accept any fields\n\n// Log all requests\napp.use((req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n  next();\n});\n\n// Upload endpoint\napp.post(\"/upload\", upload, (req, res) => {\n  try {\n    if (!req.files || req.files.length === 0) {\n      return res.status(400).json({\n        message: \"No files uploaded.\"\n      });\n    }\n    const textFile = req.files.find(f => f.fieldname === \"textfile\"); // optional for Images.jsx, required for Resources.jsx\n    const imageFile = req.files.find(f => f.fieldname === \"file\"); // optional\n\n    if (req.path.includes(\"resources\") && !textFile) {\n      return res.status(400).json({\n        message: \"Text file is required.\"\n      });\n    }\n    console.log(\"Files uploaded:\");\n    if (textFile) console.log(\"Text file:\", textFile.originalname);\n    if (imageFile) console.log(\"Image file:\", imageFile.originalname);\n\n    // Always respond with JSON\n    res.json({\n      message: \"Upload successful\",\n      textfile: textFile ? textFile.originalname : null,\n      image: imageFile ? imageFile.originalname : null\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      message: \"Server error during upload.\"\n    });\n  }\n});\n\n// Delete endpoint\napp.delete(\"/delete/:filename\", (req, res) => {\n  const filename = req.params.filename;\n  const filePath = path.join(uploadDir, filename);\n  if (!fs.existsSync(filePath)) return res.status(404).json({\n    message: \"File not found.\"\n  });\n  fs.unlink(filePath, err => {\n    if (err) {\n      console.error(\"Delete error:\", err.message);\n      return res.status(500).json({\n        message: \"Error deleting file.\"\n      });\n    }\n    res.json({\n      message: \"File deleted successfully.\"\n    });\n  });\n});\n\n// Serve uploads folder\napp.use(\"/uploads\", express.static(uploadDir));\nconst PORT = 5000;\napp.listen(PORT, () => console.log(`✅ Server running at http://localhost:${PORT}`));","map":{"version":3,"names":["express","multer","cors","fs","path","fileURLToPath","app","use","json","__filename","import","meta","url","__dirname","dirname","uploadDir","join","existsSync","mkdirSync","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","any","res","next","console","log","Date","toISOString","method","post","files","length","status","message","textFile","find","f","fieldname","imageFile","includes","textfile","image","err","error","delete","params","filePath","unlink","static","PORT","listen"],"sources":["C:/Users/Flame/sadseditor/sadseditor/client/src/images.jsx"],"sourcesContent":["import express from \"express\";\r\nimport multer from \"multer\";\r\nimport cors from \"cors\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Fix __dirname for ES modules\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\n// Create uploads folder if missing\r\nconst uploadDir = path.join(__dirname, \"uploads\");\r\nif (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);\r\n\r\n// Multer: accept any files (prevents UnexpectedField)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => cb(null, uploadDir),\r\n  filename: (req, file, cb) => cb(null, file.originalname),\r\n});\r\nconst upload = multer({ storage }).any(); // <-- accept any fields\r\n\r\n// Log all requests\r\napp.use((req, res, next) => {\r\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\r\n  next();\r\n});\r\n\r\n// Upload endpoint\r\napp.post(\"/upload\", upload, (req, res) => {\r\n  try {\r\n    if (!req.files || req.files.length === 0) {\r\n      return res.status(400).json({ message: \"No files uploaded.\" });\r\n    }\r\n\r\n    const textFile = req.files.find(f => f.fieldname === \"textfile\"); // optional for Images.jsx, required for Resources.jsx\r\n    const imageFile = req.files.find(f => f.fieldname === \"file\"); // optional\r\n\r\n    if (req.path.includes(\"resources\") && !textFile) {\r\n      return res.status(400).json({ message: \"Text file is required.\" });\r\n    }\r\n\r\n    console.log(\"Files uploaded:\");\r\n    if (textFile) console.log(\"Text file:\", textFile.originalname);\r\n    if (imageFile) console.log(\"Image file:\", imageFile.originalname);\r\n\r\n    // Always respond with JSON\r\n    res.json({\r\n      message: \"Upload successful\",\r\n      textfile: textFile ? textFile.originalname : null,\r\n      image: imageFile ? imageFile.originalname : null,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: \"Server error during upload.\" });\r\n  }\r\n});\r\n\r\n// Delete endpoint\r\napp.delete(\"/delete/:filename\", (req, res) => {\r\n  const filename = req.params.filename;\r\n  const filePath = path.join(uploadDir, filename);\r\n\r\n  if (!fs.existsSync(filePath)) return res.status(404).json({ message: \"File not found.\" });\r\n\r\n  fs.unlink(filePath, (err) => {\r\n    if (err) {\r\n      console.error(\"Delete error:\", err.message);\r\n      return res.status(500).json({ message: \"Error deleting file.\" });\r\n    }\r\n    res.json({ message: \"File deleted successfully.\" });\r\n  });\r\n});\r\n\r\n// Serve uploads folder\r\napp.use(\"/uploads\", express.static(uploadDir));\r\n\r\nconst PORT = 5000;\r\napp.listen(PORT, () => console.log(`✅ Server running at http://localhost:${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}